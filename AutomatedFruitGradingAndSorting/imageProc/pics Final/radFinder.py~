import time
import cv2
import numpy as np
import os

all = os.listdir()
all = [f for f in all if f[-1]=='p']
all.sort()

def showImage(image, title="Test", waitTime=1000):
	cv2.imshow(title,image)
	cv2.waitKey(waitTime)
	cv2.destroyWindow(title)

def distCalc(pt1,pt2):
	x1,y1 = pt1
	x2,y2 = pt2
	dist = (((y2-y1)**2)+((x2-x1)**2))**0.5
	return dist

def minVarRadius(cont, toShowImg, verbosity=0):
	image = toShowImg.copy()
	M=cv2.moments(cont)
	cx = M['m10']/M['m00']
	cy = M['m01']/M['m00']
	dx=0
	dy=0
	counter = 0
	if(verbosity>0):
		print("START of center finding")
	while True:
		centroid =(cx+dx,cy+dy)
		cx =centroid[0]
		cy=centroid[1]
		sumRad = 0
		minRadpt = cont[0][0]
		allRad = []
		for i in range(0,len(cont)):
			allRad.append(distCalc(centroid,cont[i][0]))
			sumRad = sumRad + allRad[i]
			if(allRad[i]<distCalc(centroid,minRadpt)):
				minRadpt=cont[i][0]
		std = np.std(allRad)
		if(verbosity>0):
			image = toShowImg.copy()
			cv2.circle(image, (int(centroid[0]),int(centroid[1])), 2, (0,0,255), 2)
			cv2.circle(image, (int(minRadpt[0]),int(minRadpt[1])), 2, (255,0,0), 2)
			showImage(image)
			print(std)

		if(std<7):
			if(verbosity>0):
				print("END")
				time.sleep(3)
			rad = sumRad/len(cont)
			return rad,std
		else:
			dx = 1*std*np.sin(np.arctan2((centroid[0]-minRadpt[0]),(centroid[1]-minRadpt[1])))
			dy = 1*std*np.cos(np.arctan2((centroid[0]-minRadpt[0]),(centroid[1]-minRadpt[1])))
		counter+=1
		if(counter>15):
			if(verbosity>0):
				print("Counter Exceeded. Ending with radius ZERO.")
			return 0,0

def radFinder(image, verbosity=0):
	"""Given an image of a fruit, it finds the center of the fruit and its radius."""
	if(type(image)==str):
		image = cv2.imread(image)
	image_bw = cv2.cvtColor(image.copy(), cv2.COLOR_BGR2GRAY)
	th1 = cv2.adaptiveThreshold(image_bw.copy(), 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 11, 2)
	image_copy = image.copy()

	radMax = 0
	dpMax =0
	for dp in range(1,10,1):
		if(verbosity>1):
			image = image_copy.copy()
		circ = cv2.HoughCircles(image_bw.copy(), cv2.HOUGH_GRADIENT, dp, minDist = 400, minRadius=100)
		if(circ is not None):
			for c in circ:
				x,y,r =c[0].astype("int")
				if(radMax<r):
					radMax=r
					dpMax=dp
				if(verbosity>1):
					print(dp)
					cv2.circle(image,(x,y),r,(0,255,0),2)
					showImage(image,title=str(dp),waitTime=500)
		else:
			if(verbosity>1):
				print("Helllo",dp)
	if(verbosity>1):
		image = image_copy.copy()

	circ = cv2.HoughCircles(image_bw.copy(), cv2.HOUGH_GRADIENT, dpMax, minDist = 400, minRadius=100)
	if(circ is not None):
		x,y,r = circ[0,0].astype("int")
		mask = np.zeros(th1.shape)
		for i in range(0,th1.shape[0]):
			for j in range(0,th1.shape[1]):
				dx = i-y
				dy = j-x
				mask[i,j]= ((dx**2)+(dy**2))<=(r+20)**2
				#mask[i,j]= mask[i,j]*(((dx**2)+(dy**2))>=(r-20)**2)  #Untested but should work better
		ans = np.multiply(th1,mask)

		if(verbosity>0):
			showImage(ans, title="Masked image", waitTime=5000)

		ans_scaled = cv2.convertScaleAbs(ans.copy())
		a,cnts,b=cv2.findContours(ans_scaled.copy(),cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)
		max_area=0
		for c in cnts:
		    area=cv2.contourArea(c)
		    if area>max_area:
		        max_area=area
		        best_cnt=c
		areaNormal=cv2.contourArea(best_cnt)
		cv2.drawContours(image,[best_cnt],-1,(0,255,0),2)
		radAreaNormal=(areaNormal/3.14159)**0.5
		radPtsNormal, stdDevNormal = minVarRadius(best_cnt, image, verbosity)
		radPtsNormal = radPtsNormal - (stdDevNormal/2)
		image = image_copy.copy()

		closing = cv2.morphologyEx(ans.copy(), cv2.MORPH_CLOSE, np.ones((3,3),np.uint8))
		closing = cv2.convertScaleAbs(closing)
		a,cnts,b=cv2.findContours(closing.copy(),cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)
		max_area=0
		for c in cnts:
		    area=cv2.contourArea(c)
		    if area>max_area:
		        max_area=area
		        best_cnt=c

		areaClosed=cv2.contourArea(best_cnt)
		cv2.drawContours(image,[best_cnt],-1,(0,255,0),2)
		radAreaClosed=(areaClosed/3.14159)**0.5
		radPtsClosed, stdDevClosed = minVarRadius(best_cnt, image, verbosity)
		radPtsClosed = radPtsClosed - (stdDevClosed/2)
		image = image_copy.copy()

		if(verbosity>0):
			print("radAreaNormal is",radAreaNormal)
			print("radAreaClosed is",radAreaClosed)
			print("radPtsNormal is",radPtsNormal)
			print("radPtsCent is",radPtsClosed)
			print("stdDecNormal is",stdDevNormal)
			print("stdDevClosed is",stdDevClosed)

		radii = [radAreaNormal, radAreaClosed, radPtsNormal, radPtsClosed]
		radii = [f for f in radii if f>100]
		if(len(radii)>0):
			cv2.destroyAllWindows()
			return np.mean(radii)
		else:
			cv2.destroyAllWindows()
			return -2.2
	else:
		cv2.destroyAllWindows()
		return -2.2

if __name__=='__main__':
	allRadii=[]
	allTimes=[]
	for f in all:
		aaa = time.time()
		radius = radFinder(cv2.imread(f),0)
		allTimes.append(time.time()-aaa)
		allRadii.append((radius/2.2, f))
		print(f)
